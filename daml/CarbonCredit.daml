module CarbonCredit where

import DA.Optional  
import DA.Date

data CarbonCreditInfo = CarbonCreditInfo with
    issuer: Party
    amount: Int
    issueDate: Date
    validUntil: Date
  deriving (Show, Eq)

template CarbonCreditIssuance
  with
    issuer: Party
    owner: Party
    creditInfo: CarbonCreditInfo
  where
    signatory issuer, owner
    observer issuer
    key (issuer, creditInfo): (Party, CarbonCreditInfo)
    maintainer key._1

    nonconsuming choice UpdateCreditInfo: ContractId CarbonCreditIssuance
      with
        newAmount: Optional Int
        newValidUntil: Optional Date
      controller owner
      do
        assertMsg "New amount must be positive" $ case newAmount of
                                                    None -> True
                                                    Some amt -> amt > 0
        let updatedCreditInfo = creditInfo with
              amount = fromOptional creditInfo.amount newAmount  
              validUntil = fromOptional creditInfo.validUntil newValidUntil  
        create this with creditInfo = updatedCreditInfo

    nonconsuming choice CheckTransferEligibility: Bool
      with
        proposedReceiver: Party
      controller owner
      do
        currentDate <- getTime
        let currentDateAsDate = toDateUTC currentDate
        return (currentDateAsDate < creditInfo.validUntil)

    choice ConditionalTransfer: ContractId CarbonCreditTransfer
      with
        receiver: Party
      controller owner
      do
        currentDate <- getTime
        let currentDateAsDate = toDateUTC currentDate
        assertMsg "Credit is no longer valid" (currentDateAsDate < creditInfo.validUntil)
        create CarbonCreditTransfer with sender = owner, receiver, creditIssuanceIssuer = issuer, creditIssuanceIssueDate = creditInfo.issueDate

    nonconsuming choice TryMultipleTransfers: [ContractId CarbonCreditTransfer]
      with
        receivers: [Party]
      controller owner
      do
        currentDate <- getTime
        let currentDateAsDate = toDateUTC currentDate
        assertMsg "Credit is no longer valid" (currentDateAsDate < creditInfo.validUntil)
        forA receivers (\receiver -> do
          create CarbonCreditTransfer with sender = owner, receiver, creditIssuanceIssuer = issuer, creditIssuanceIssueDate = creditInfo.issueDate)

template CarbonCreditTransfer
  with
    sender: Party
    receiver: Party
    creditIssuanceIssuer: Party
    creditIssuanceIssueDate: Date
  where
    signatory sender
    observer receiver

    choice AcceptOrRejectTransfer: Optional (ContractId CarbonCreditIssuance)
      with
        accept: Bool
      controller receiver
      do
        if accept then do
          let key = (creditIssuanceIssuer, CarbonCreditInfo with issuer = creditIssuanceIssuer; amount = 0; issueDate = creditIssuanceIssueDate; validUntil = creditIssuanceIssueDate)
          (_, issuerContract) <- fetchByKey @CarbonCreditIssuance key
          let newCreditInfo = issuerContract.creditInfo
          newContractId <- create CarbonCreditIssuance with issuer = creditIssuanceIssuer, owner = receiver, creditInfo = newCreditInfo
          return (Some newContractId)
        else
          return None
