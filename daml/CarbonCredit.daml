module CarbonCredit where

-- Custom data type with deriving clauses for built-in typeclasses
data CarbonCreditInfo = CarbonCreditInfo
  with
    issuer: Party
    owner: Party
    amount: Decimal
    certification: Text
  deriving (Eq, Show)

-- Custom typeclass for additional functionality
class CustomShow a where
  customShow : a -> Text

instance CustomShow CarbonCreditInfo where
  customShow info = info.certification <> ": " <> show (info.amount)

template CarbonCredit
  with
    info: CarbonCreditInfo
  where
    signatory info.issuer, info.owner
    observer info.owner 
    
    key info.issuer: Party
    maintainer key

    choice TransferCredit: ContractId CarbonCredit
      with
        newOwner: Party
      controller info.owner
      do
        assertMsg "Cannot transfer zero or negative amount of carbon credits" (info.amount > 0.0)
        fetchByKey @CarbonCredit info.issuer 
        if newOwner /= info.owner
          then create this with info = info with owner = newOwner
          else abort "Transfer aborted: new owner is the same as the current owner"

    nonconsuming choice SplitCredit: [ContractId CarbonCredit]
      with
        amounts: [Decimal]
      controller info.owner
      do
        assertMsg "Total split amounts must equal original amount" (sum amounts == info.amount)
        forA amounts (\amt -> create this with info = info with amount = amt) 

template CarbonCreditProposal
  with
    credit: CarbonCreditInfo
    proposedTo: Party
  where
    signatory credit.issuer
    observer proposedTo
    
    key credit.issuer: Party
    maintainer key

    choice AcceptProposal: Either Text (ContractId CarbonCredit)
      controller proposedTo
      do
        if credit.amount <= 0.0
          then return (Left "Invalid credit amount") 
          else do
            newCredit <- create CarbonCredit with info = credit with owner = proposedTo
            return (Right newCredit)

    nonconsuming choice RejectProposal: Optional (ContractId CarbonCreditProposal)
      controller proposedTo
      do
        if credit.amount > 1000.0
          then do
            archive self
            return None
          else return (Some self)