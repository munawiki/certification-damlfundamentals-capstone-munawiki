module CarbonCredit where

data CarbonCredit = CarbonCredit with
    amount: Int
    regulatoryBody: Party
  deriving (Show, Eq)

class Display a where
  display : a -> Text

instance Display CarbonCredit where
  display cc = "Amount: " <> show cc.amount <> ", Regulatory Body: " <> show cc.regulatoryBody

template CarbonCreditIssuance
  with
    issuer: Party
    company: Party
    carbonCredit: CarbonCredit
  where
    signatory company
    observer issuer

    key (issuer, company): (Party, Party)
    maintainer key._1

    choice IncreaseCredit: ContractId CarbonCreditIssuance
      with
        increment: Int
      controller issuer
      do
        assertMsg "Increment must be positive" (increment > 0)
        create this with carbonCredit = carbonCredit with amount = carbonCredit.amount + increment

    choice BatchTransfer: [ContractId CarbonCreditTransfer]
      with
        receivers: [Party]
        amountPerReceiver: Int
      controller issuer
      do
        forA receivers $ \receiver -> do
          create CarbonCreditTransfer with sender = issuer; receiver; carbonCredit = carbonCredit with amount = amountPerReceiver

template CarbonCreditTransfer
  with
    sender: Party
    receiver: Party
    carbonCredit: CarbonCredit
  where
    signatory sender, receiver
    observer carbonCredit.regulatoryBody

    key (sender, receiver): (Party, Party)
    maintainer key._1

    ensure carbonCredit.amount > 0

    nonconsuming choice TransferIfEnoughCredits: Optional (ContractId CarbonCreditTransfer)
      with
        requiredAmount: Int
      controller sender
      do
        if carbonCredit.amount >= requiredAmount
          then do
            let newAmount = carbonCredit.amount - requiredAmount
            let newCredit = carbonCredit with amount = newAmount
            newTransfer <- create this with carbonCredit = newCredit
            return (Some newTransfer)
          else
            return None

    choice ValidateTransfer: Either Text (ContractId CarbonCreditTransfer)
      controller receiver
      do
        if carbonCredit.amount <= 0
          then return (Left "Invalid amount for transfer.")
          else create this >>= \cid -> return (Right cid)