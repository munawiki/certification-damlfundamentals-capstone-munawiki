module CarbonCredit where

data CarbonCreditDetails = CarbonCreditDetails
  with
    projectId: Text
    verifiedBy: Text
    creditType: Text
    volume: Int -- 단위: 톤
  deriving (Show, Eq)

template CarbonCreditIssue
  with
    issuer: Party
    beneficiary: Party
    details: CarbonCreditDetails
    issueDate: Date
  where
    signatory issuer
    observer beneficiary
    key (issuer, issueDate) : (Party, Date)
    maintainer key._1
    
    -- 조건부 크레딧 발행 취소 (Conditional & assertMsg)
    nonconsuming choice ConditionalCancelIssue: Optional CarbonCreditIssue
      with
        reason: Text
      controller issuer
      do
        assertMsg "Only projects verified by 'EcoTrust' can be cancelled" (details.verifiedBy == "EcoTrust")
        if reason == "Project not viable"
          then do
            archive self
            pure None
          else
            pure (Some this)

    -- 크레딧 거래를 위한 선택지 (Retrieval & Iterative)
    nonconsuming choice TransferCredits: Either Text (ContractId CarbonCreditTransfer)
      with
        receiver: Party
        transferAmount: Int
      controller issuer
      do
        if transferAmount <= 0 then
          return (Left "Transfer amount must be positive")
        else do
          let newVolume = details.volume - transferAmount
          if newVolume < 0 then
            return (Left "Not enough carbon credits to transfer")
          else do
            let newDetails = details with volume = newVolume
            contractId <- create CarbonCreditTransfer with sender = issuer; receiver; details = newDetails; transferDate = issueDate
            return (Right contractId)


template CarbonCreditTransfer
  with
    sender: Party
    receiver: Party
    details: CarbonCreditDetails
    transferDate: Date
  where
    signatory sender, receiver
    key (sender, receiver, transferDate) : (Party, Party, Date)
    maintainer key._1

    -- 크레딧을 다시 전송하는 선택지 (consuming & ensure)
    choice ReTransferCredits: Either Text CarbonCreditTransfer
      with
        newReceiver: Party
      controller receiver
      do
        assertMsg "New receiver must be different from the current receiver" (newReceiver /= receiver) -- 수신자와 새 수신자가 동일하지 않아야 함
        if details.volume > 0
          then do
            create this with receiver = newReceiver
            return (Right this)
          else return (Left "No credits available to transfer")

    -- 크레딧 거래 취소 (Optional & nonconsuming)
    nonconsuming choice CancelTransfer: Optional CarbonCreditTransfer
      controller receiver
      do
        if receiver /= sender
          then do
            archive self
            return None
          else
            return (Some this)
