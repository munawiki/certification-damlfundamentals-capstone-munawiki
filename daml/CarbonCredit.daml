module CarbonCredit where

data CarbonCreditDetails = CarbonCreditDetails
  with
    description: Text
    issuedDate: Date
  deriving (Show, Eq) 

class Verifiable a where
  verify : Date -> a -> Bool

instance Verifiable CarbonCreditDetails where
  verify currentDate details = details.issuedDate <= currentDate

template CarbonCreditIssuance
  with
    issuer: Party
    company: Party
    regulator: Party
    amount: Int
    details: CarbonCreditDetails 
  where
    signatory issuer, company
    observer regulator
    key (issuer, company): (Party, Party)
    maintainer key._1
    
    ensure amount > 0
    
    choice ConsumeCredits: ()
      with
        amountToConsume: Int
      controller company
      do
        assertMsg "Insufficient carbon credits for consumption" (amount >= amountToConsume)
        if amountToConsume == amount
          then archive self
          else pure ()
          
    nonconsuming choice TransferCredits: [ContractId CarbonCreditTransfer]
      with
        receiver: Party
        transferAmount: Int
        times: Int
      controller company
      do
        forA [1..times] $ \_ -> create CarbonCreditTransfer with sender = company, receiver, regulator, amount = transferAmount, details


template CarbonCreditTransfer
  with
    sender: Party
    receiver: Party
    regulator: Party
    amount: Int
    details: CarbonCreditDetails
  where
    signatory sender, receiver
    observer regulator
    key (sender, receiver): (Party, Party)
    maintainer key._1
    
    nonconsuming choice VerifyTransfer: Either Text ()
      with
        currentDate: Date
      controller receiver
      do
        if verify currentDate details
          then pure (Right ())
          else pure (Left "Carbon credit details verification failed")
    nonconsuming choice FetchAndCheckCredits: Either Text ()
      with
        issuer: Party
        company: Party
      controller receiver
      do
        issuanceCid <- fetchByKey @CarbonCreditIssuance (issuer, company)
        let (_, issuance) = issuanceCid
        if issuance.amount >= amount
          then pure (Right ())
          else pure (Left "Insufficient carbon credits for transfer")
