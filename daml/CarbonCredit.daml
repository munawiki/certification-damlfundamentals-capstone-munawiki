module CarbonCredit where

data CarbonCreditDetails = CarbonCreditDetails with
  issuer: Party
  organization: Party
  regulator: Party
  amount: Int
    deriving (Show, Eq)

class CreditOperations a where
  validateTransfer : a -> Int -> Bool

instance CreditOperations CarbonCreditDetails where
  validateTransfer details transferAmount = transferAmount <= details.amount

template CarbonCreditIssuance
  with
    details: CarbonCreditDetails
  where
    signatory details.organization
    observer details.regulator

    key (details.issuer, details.organization): (Party, Party)
    maintainer key._1

    choice TransferCredits: ContractId CarbonCreditTransfer
      with
        recipient: Party
        transferAmount: Int
      controller details.organization
      do
        assert (validateTransfer details transferAmount)
        create CarbonCreditTransfer with
          details = CarbonCreditDetails with
            issuer = details.issuer
            organization = details.organization
            regulator = details.regulator
            amount = transferAmount
          recipient

template CarbonCreditTransfer
  with
    details: CarbonCreditDetails
    recipient: Party
  where
    signatory details.organization
    observer recipient

    key (details.organization, recipient): (Party, Party)
    maintainer key._1