module Main where

import Daml.Script
import CarbonCredit

setup : Script (Party, Party, Party)
setup = script do
  issuer <- allocatePartyWithHint "Issuer" (PartyIdHint "IssuerUser")
  owner <- allocatePartyWithHint "Owner" (PartyIdHint "OwnerUser")
  newOwner <- allocatePartyWithHint "NewOwner" (PartyIdHint "NewOwnerUser")
  
  -- Assuming createUser is a function that creates a user and assigns rights
  -- This part is conceptual and depends on your specific setup and SDK version
  issuerUserId <- validateUserId "IssuerUser"
  ownerUserId <- validateUserId "OwnerUser"
  newOwnerUserId <- validateUserId "NewOwnerUser"
  
  createUser (User issuerUserId (Some issuer)) [CanActAs issuer]
  createUser (User ownerUserId (Some owner)) [CanActAs owner]
  createUser (User newOwnerUserId (Some newOwner)) [CanActAs newOwner]
  
  return (issuer, owner, newOwner)

testTransferCarbonCredit : Script ()
testTransferCarbonCredit = script do
  (issuer, owner, newOwner) <- setup
  carbonCreditCid <- submitMulti [issuer, owner] [] do
    createCmd CarbonCredit with issuer; owner; amount = 100
  transferProposalCid <- submit owner do
    exerciseCmd carbonCreditCid (TransferCarbonCredit newOwner)
  _ <- submit newOwner do
    exerciseCmd transferProposalCid AcceptTransfer
  return ()

testIncreaseCarbonCredit : Script ()
testIncreaseCarbonCredit = script do
  (issuer, owner, _) <- setup
  carbonCreditCid <- submitMulti [issuer, owner] [] do
    createCmd CarbonCredit with issuer; owner; amount = 100
  _ <- submit issuer do
    exerciseCmd carbonCreditCid (IncreaseCarbonCredit 50)
  return ()

testConditionalTransfer : Script ()
testConditionalTransfer = script do
  (issuer, owner, newOwner) <- setup
  carbonCreditCid <- submitMulti [issuer, owner] [] do
    createCmd CarbonCredit with issuer; owner; amount = 100
  transferProposalCid <- submit owner do
    exerciseCmd carbonCreditCid (ConditionalTransfer newOwner 50)
  _ <- submit newOwner do
    exerciseCmd transferProposalCid AcceptTransfer
  return ()
