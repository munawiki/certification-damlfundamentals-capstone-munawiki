module Main where
import Daml.Script
import CarbonCredit
import DA.Date 

setup : Script (Party, Party, Party, Party)
setup = script do
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  receiver <- allocateParty "Receiver"
  regulator <- allocateParty "Regulator"
  pure (issuer, company, receiver, regulator)


-- 1. Issuance of Carbon Credits: An issuer creates carbon credits for a company, specifying the amount and details of the credits.
testIssuanceHappyPath : Script ()
testIssuanceHappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits to be proposed
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Proposal for Issuance of Carbon Credits
  proposalCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Acceptance of the Proposal
  issuanceCid <- submit company do
    exerciseCmd proposalCid AcceptProposal
  
  -- Verification
  submit company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 500
  
  pure ()

testIssuanceUnhappyPath : Script ()
testIssuanceUnhappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits to be proposed
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Proposal for Issuance of Carbon Credits
  proposalCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Acceptance of the Proposal
  issuanceCid <- submit company do
    exerciseCmd proposalCid AcceptProposal
  
  -- Attempt to consume more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 1500
  
  pure ()  

-- 2. Consumption of Carbon Credits: The company consumes a portion of its carbon credits as part of its carbon offset efforts.
testConsumeCreditsHappyPath : Script ()
testConsumeCreditsHappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Company accepts the proposal, triggering the creation of CarbonCreditIssuance
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Successful Consumption of Carbon Credits
  submit company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 200
  
  pure ()

testConsumeCreditsUnhappyPath : Script ()
testConsumeCreditsUnhappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Company accepts the proposal, triggering the creation of CarbonCreditIssuance
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Attempt to consume more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 1500
  
  pure ()

-- 3. Transfer of Carbon Credits: The company transfers some of its carbon credits to another party.
testTransferCreditsHappyPath : Script ()
testTransferCreditsHappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  receiver <- allocateParty "Receiver"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits to the company
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Create a Transfer Proposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  
  -- Receiver accepts the Transfer Proposal
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  pure ()

testTransferCreditsUnhappyPath : Script ()
testTransferCreditsUnhappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  receiver <- allocateParty "Receiver"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits to the company
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Attempt to transfer more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid TransferCredits with receiver, transferAmount = 1500, times = 1
  
  pure ()

-- 4. Verification of Carbon Credits: The receiving party verifies the details of the transferred carbon credits.testVerifyCreditsHappyPath : Script ()
testVerifyCreditsHappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  receiver <- allocateParty "Receiver"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2022 Jan 1
  
  -- Issuance and transfer of Carbon Credits to the receiver
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  _ <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  -- Verification of the transferred Carbon Credits
  submit receiver do
    exerciseCmd transferCid VerifyTransfer with currentDate = date 2023 Jan 1
  
  pure ()

testVerifyCreditsUnhappyPath : Script ()
testVerifyCreditsUnhappyPath = script do
  -- Setup parties
  issuer <- allocateParty "Issuer"
  company <- allocateParty "Company"
  receiver <- allocateParty "Receiver"
  regulator <- allocateParty "Regulator"
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance and transfer of Carbon Credits to the receiver
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  _ <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  -- Attempt to verify the transferred Carbon Credits with an invalid date, should fail
  submitMustFail receiver do
    exerciseCmd transferCid VerifyTransfer with currentDate = date 2022 Dec 31
  
  pure ()
