module Main where

import Daml.Script
import CarbonCredit
import DA.Foldable (forA_)



setup : Script ()
setup = script do
  issuer <- allocatePartyWithHint "Issuer" (PartyIdHint "Issuer")
  company <- allocatePartyWithHint "Company" (PartyIdHint "Company")
  regulatoryBody <- allocatePartyWithHint "RegulatoryBody" (PartyIdHint "RegulatoryBody")
  sender <- allocatePartyWithHint "Sender" (PartyIdHint "Sender")
  receiver <- allocatePartyWithHint "Receiver" (PartyIdHint "Receiver")
  receivers <- mapA (\name -> allocatePartyWithHint name (PartyIdHint name)) ["Receiver1", "Receiver2", "Receiver3"]

  issuerId <- validateUserId "Issuer"
  companyId <- validateUserId "Company"
  regulatoryBodyId <- validateUserId "RegulatoryBody"
  senderId <- validateUserId "Sender"
  receiverId <- validateUserId "Receiver"
  receiverIds <- mapA validateUserId ["Receiver1", "Receiver2", "Receiver3"]

  createUser (User issuerId (Some issuer)) [CanActAs issuer]
  createUser (User companyId (Some company)) [CanActAs company]
  createUser (User regulatoryBodyId (Some regulatoryBody)) [CanActAs regulatoryBody]
  createUser (User senderId (Some sender)) [CanActAs sender]
  createUser (User receiverId (Some receiver)) [CanActAs receiver]
  forA_ (zip receivers receiverIds) $ \(receiver, receiverId) -> do
    createUser (User receiverId (Some receiver)) [CanActAs receiver]

