module Main where
import Daml.Script
import CarbonCredit
import DA.Date 

setup : Int -> Script (Party, Party, Party, Party)
setup uniqueSuffix = script do
  let suffix = show uniqueSuffix
  
  issuer <- allocatePartyWithHint ("Issuer" <> suffix) (PartyIdHint ("Issuer" <> suffix))
  company <- allocatePartyWithHint ("Company" <> suffix) (PartyIdHint ("Company" <> suffix))
  receiver <- allocatePartyWithHint ("Receiver" <> suffix) (PartyIdHint ("Receiver" <> suffix))
  regulator <- allocatePartyWithHint ("Regulator" <> suffix) (PartyIdHint ("Regulator" <> suffix))

  issuerId <- validateUserId ("Issuer" <> suffix)
  companyId <- validateUserId ("Company" <> suffix)
  receiverId <- validateUserId ("Receiver" <> suffix)
  regulatorId <- validateUserId ("Regulator" <> suffix)

  createUser (User issuerId (Some issuer)) [CanActAs issuer]
  createUser (User companyId (Some company)) [CanActAs company]
  createUser (User receiverId (Some receiver)) [CanActAs receiver]
  createUser (User regulatorId (Some regulator)) [CanActAs regulator]

  pure (issuer, company, receiver, regulator)


runAllTests : Script ()
runAllTests = script do
  -- Run tests sequentially
  testIssuanceHappyPath
  testIssuanceUnhappyPath
  testConsumeCreditsHappyPath
  testConsumeCreditsUnhappyPath
  testTransferCreditsHappyPath
  testTransferCreditsUnhappyPath
  testVerifyCreditsHappyPath
  testVerifyCreditsUnhappyPath
  -- Add any additional tests here
  pure ()

-- 1. Issuance of Carbon Credits: An issuer creates carbon credits for a company, specifying the amount and details of the credits.
testIssuanceHappyPath : Script ()
testIssuanceHappyPath = script do
  -- Setup parties
  (issuer, company, _, regulator) <- setup 1
  
  -- Details of the carbon credits to be proposed
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Proposal for Issuance of Carbon Credits
  proposalCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Acceptance of the Proposal
  issuanceCid <- submit company do
    exerciseCmd proposalCid AcceptProposal
  
  -- Verification
  submit company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 500
  
  pure ()

testIssuanceUnhappyPath : Script ()
testIssuanceUnhappyPath = script do
  -- Setup parties
  (issuer, company, _, regulator) <- setup 2
  
  -- Details of the carbon credits to be proposed
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Proposal for Issuance of Carbon Credits
  proposalCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Acceptance of the Proposal
  issuanceCid <- submit company do
    exerciseCmd proposalCid AcceptProposal
  
  -- Attempt to consume more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 1500
  
  pure ()  

-- 2. Consumption of Carbon Credits: The company consumes a portion of its carbon credits as part of its carbon offset efforts.
testConsumeCreditsHappyPath : Script ()
testConsumeCreditsHappyPath = script do
  -- Setup parties
  (issuer, company, _, regulator) <- setup 3
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Company accepts the proposal, triggering the creation of CarbonCreditIssuance
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Successful Consumption of Carbon Credits
  submit company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 200
  
  pure ()

testConsumeCreditsUnhappyPath : Script ()
testConsumeCreditsUnhappyPath = script do
  -- Setup parties
  (issuer, company, _, regulator) <- setup 4
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  
  -- Company accepts the proposal, triggering the creation of CarbonCreditIssuance
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Attempt to consume more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid ConsumeCredits with amountToConsume = 1500
  
  pure ()

-- 3. Transfer of Carbon Credits: The company transfers some of its carbon credits to another party.
testTransferCreditsHappyPath : Script ()
testTransferCreditsHappyPath = script do
  -- Setup parties
  (issuer, company, receiver, regulator) <- setup 5

  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits to the company
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Create a Transfer Proposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  
  -- Receiver accepts the Transfer Proposal
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  pure ()

testTransferCreditsUnhappyPath : Script ()
testTransferCreditsUnhappyPath = script do
  -- Setup parties
  (issuer, company, receiver, regulator) <- setup 6
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance of Carbon Credits to the company
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  issuanceCid <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  
  -- Attempt to transfer more credits than available, should fail
  submitMustFail company do
    exerciseCmd issuanceCid TransferCredits with receiver, transferAmount = 1500, times = 1
  
  pure ()

-- 4. Verification of Carbon Credits: The receiving party verifies the details of the transferred carbon credits.testVerifyCreditsHappyPath : Script ()
testVerifyCreditsHappyPath = script do
  -- Setup parties
  (issuer, company, receiver, regulator) <- setup 7
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2022 Jan 1
  
  -- Issuance and transfer of Carbon Credits to the receiver
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  _ <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  -- Verification of the transferred Carbon Credits
  submit receiver do
    exerciseCmd transferCid VerifyTransfer with currentDate = date 2023 Jan 1
  
  pure ()

testVerifyCreditsUnhappyPath : Script ()
testVerifyCreditsUnhappyPath = script do
  -- Setup parties
  (issuer, company, receiver, regulator) <- setup 8
  
  -- Details of the carbon credits
  let carbonCreditDetails = CarbonCreditDetails with description = "Renewable Energy Credits"; issuedDate = date 2023 Jan 1
  
  -- Issuance and transfer of Carbon Credits to the receiver
  issuanceCid <- submit issuer do
    createCmd CarbonCreditIssuanceProposal with issuer, company, regulator, amount = 1000, details = carbonCreditDetails
  _ <- submit company do
    exerciseCmd issuanceCid AcceptProposal
  transferProposalCid <- submit company do
    createCmd CarbonCreditTransferProposal with sender = company, receiver, regulator, amount = 500, details = carbonCreditDetails
  transferCid <- submit receiver do
    exerciseCmd transferProposalCid AcceptTransfer
  
  -- Attempt to verify the transferred Carbon Credits with an invalid date, should fail
  submitMustFail receiver do
    exerciseCmd transferCid VerifyTransfer with currentDate = date 2022 Dec 31
  
  pure ()
